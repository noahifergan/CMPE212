/*
 * CMPE212 Assignment 2
 * Created by Noah Ifergan (16nji - 20024375) , submitted on February 15th
 * This program analyzes data of currents generated by seven DC servomotors in a a malfunctioning robot
 * The output is seven csv files logging the currents of the motors during operation and their runtime
 * The program implements file reading and writing, arrays, loops, and conditionals
 */

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.DecimalFormat;
import java.util.Scanner;

public class Assn2_16nji {
	
	public static void main(String[] args) throws FileNotFoundException {
		start(); //Calls the start method to prompt the user to begin
		double[][] data = readFile(); //Reads the data and converts it into a 2D array
		for (int i = 0; i < 7; i++) { //Writes a data report for each motor
			writeReport(data, i);
		}
		System.out.print("Analysis complete!");
	}
	
	//This method reads the data from logger.csv and converts it into a 2D array
	public static double[][] readFile() {
		String csvFile = "src/Logger.csv";
		String line;
		int lineNumber = 0;
		double[][] data = new double[1000][7];
		String[] lineArray = new String[7];
		try (BufferedReader br = new BufferedReader(new FileReader(csvFile))) { //Opens try-catch and uses reader as a resource
			while ((line = br.readLine()) != null) {
				lineArray = line.split(","); //Splits lines into arrays by comma separation
				for (int i = 1; i < lineArray.length; i++) { //Cycles through each entry in the line
					data[lineNumber][i-1] = Double.parseDouble(lineArray[i]); //Parses data from string to a double
				}
				lineNumber++; //Increments to the next line
			}
		} catch (IOException err) {
	            System.out.println("I/O Exception:" + err);
		}
		System.out.println();
		return data; //Returns 2D array
	} //End readFile
	
	
	//This method writes the seven motor reports based on the analysed data
	public static void writeReport (double[][] data, int motorNumber) throws FileNotFoundException {
		PrintWriter printWriter = new PrintWriter(new File("src/Motor" + String.valueOf(motorNumber + 1) + ".csv"));
		String motorData = "start (sec), finish (sec), current (amps) \n";
		motorData += motorAnalysis(data, motorNumber);
		printWriter.write(motorData);
		printWriter.close();
	} //End writeReport

	//This method analyzes the data of each motor in the 2D array
	public static String motorAnalysis(double[][] data, int motorNumber) {
		boolean motorOn = false; //Boolean indicating whether motor is on or off
		String average;
		boolean currentExceeded = false;
		String returnString = ""; //Create string to hold the time and current data over each motor's runtime
		int startTime = 0, endTime = 0;
		for (int i = 0; i < 1000; i++) {
			if (data[i][motorNumber] > 1 && motorOn == false) { //When the current exceeds 1 amp, the motor is logged as on
				motorOn = true;
				startTime = i; //Logs the time that the motor begins running
			}
			if (data[i][motorNumber] > 8) { //Check if motor exceeds 8 amps
				currentExceeded = true;
			}
			if (data[i][motorNumber] < 1 && motorOn == true) { //When the running motor is turned off
				endTime = i; //Logs the time that the motor stops running
				average = averageCalculator(data, startTime, endTime, motorNumber); //Calculates the average current over the motor's runtime
				returnString += String.valueOf(startTime) + ",";
				returnString += String.valueOf(endTime-1) + ",";
				returnString += average;
				if (currentExceeded) returnString += ", ***Current Exceeded***";
				returnString += "\n";
				motorOn = false;
				currentExceeded = false;
			}
		}
		if (returnString.isEmpty()) returnString = "not used"; //If the motor did not run, indicate it was not used
		return returnString;
	} //End motorAnalysis
	
	//This method calculates the average of the current over the motor's runtime
	public static String averageCalculator(double[][] data, int start, int end, int motorNumber) {	
		double sum = 0, average = 0;
		for(int i = start; i<end; i++) {
			sum += (data[i][motorNumber]);
		}
		average = sum/(end-start);
		return sigDigs(average);
	} //End averageCalculator
	
	//This method prompts the user to begin the data analysis
	public static void start() {
		Scanner scanner = new Scanner(System.in);
		System.out.print("Press <enter> to analyze document.");
		scanner.nextLine();
		System.out.print("Analysis in progress... ");
		scanner.close();
	} //End start
	
	//This method rounds the input to 3 significant digits
	public static String sigDigs (double number) {
		DecimalFormat sigDigs = new DecimalFormat("#.###");
		return sigDigs.format(number);
	} //End sigDigs
}